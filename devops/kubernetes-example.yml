apiVersion: apps/v1
kind: Deployment
metadata:
  name: netca
  namespace: ${name-space}
  labels:
    app: netca
    workstream: dad
    version: "${app-version}"
    tier: backend
    postgre: "true"
    eventhub: "true"
    redis: "true"
    usermanagementservice: "true"
    equipmentmonitoringservice: "true"
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: netca
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: netca
        workstream: dad
        version: "${app-version}"
        tier: backend
        postgre: "true"
        eventhub: "true"
        redis: "true"
        usermanagementservice: "true"
        equipmentmonitoringservice: "true"
    spec:
      containers:
        - env:
            - name: BackgroundJob__HostName
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          envFrom:
            - configMapRef:
                name: netca-configmap
            - secretRef:
                name: netca-secrets
          image: ${acr-name}/${name-space}/netca:${app-version}
          imagePullPolicy: IfNotPresent
          name: netca
          resources:
            requests:
              memory: 256Mi
              cpu: 250m
            limits:
              memory: 512Mi
              cpu: 500m
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1234
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 62
            periodSeconds: 10
            timeoutSeconds: 60
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 62
            periodSeconds: 10
            timeoutSeconds: 60
            failureThreshold: 30
      volumes:
        - name: tmp
          emptyDir: {}
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: ${acr-name}/${name-space}
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
---
kind: Service
apiVersion: v1
metadata:
  name: netca
  namespace: ${name-space}
  labels:
    app: netca
    workstream: dad
    version: "${app-version}"
    tier: backend
    postgre: "true"
    eventhub: "true"
    redis: "true"
    usermanagementservice: "true"
    equipmentmonitoringservice: "true"
spec:
  ports:
    - port: 8080
  selector:
    app: netca
  type: NodePort
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: netca-autoscale
  namespace: ${name-space}
  labels:
    app: netca
    workstream: dad
    tier: backend
    postgre: "true"
    eventhub: "true"
    redis: "true"
    usermanagementservice: "true"
    equipmentmonitoringservice: "true"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: netca
  minReplicas: 1
  maxReplicas: 2
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 100
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 100
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 60
      policies:
        - type: Pods
          value: 1
          periodSeconds: 30
      selectPolicy: Min
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Pods
          value: 1
          periodSeconds: 15
      selectPolicy: Max
